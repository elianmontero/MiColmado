{% extends "layout.twig" %}

{% block title %}
Carrito de compras - Mi Colmado
{% endblock %}

{% block enlaces %}
<ul class="menu">
    <li><a href="agregar-producto.php">Agregar productos</a></li>
    <li><a href="ver-productos.php">Ver productos</a></li>
    <li><a href="compra.php">Carrito de compras</a></li> <!-- Enlace al carrito -->
    <li><a href="#">Sobre nosotros</a></li>
</ul>
{% endblock %}

{% block enlaces_logo %}
<a href="inicio-consumidor.php"><img src="/public/assets/img/android-chrome-512x512.png" alt="Mi colmado"><span
        id="nombre-emp">MI COLMADO</span></a>
{% endblock %}

{% block content %}
<div class="container">
    <h2>Carrito de Compras</h2>

    {% if mensaje_error %}
        <div class="alert alert-danger">
            {{ mensaje_error }}
        </div>
    {% endif %}

    {% if mensaje_exito %}
        <div class="alert alert-success">
            {{ mensaje_exito }}
        </div>
    {% endif %}

    {% if carrito|length > 0 %}
        <div class="product-list">
            {% for item in carrito %}
                <div class="product-card">
                    <div class="img-product">
                        <img src="{{ item.imagen starts with '/' or item.imagen starts with '../' ? item.imagen : '/uploads/' ~ item.imagen }}" 
                             alt="{{ item.nombre }}" 
                             onerror="this.src='/public/assets/img/denied.webp'; this.onerror=null;"
                             class="img-producto">
                    </div>
                    <div class="product-details">
                        <h3>{{ item.nombre }}</h3>
                        <p>Precio: ${{ item.precio }}</p>
                        <div class="cantidad-container">
                            <button class="btn-decrementar" data-id="{{ item.id }}" data-stock="{{ item.stock }}">-</button>
                            <input type="number" class="cantidad-input" data-id="{{ item.id }}" value="{{ item.cantidad }}" min="1" max="{{ item.stock }}">
                            <button class="btn-incrementar" data-id="{{ item.id }}" data-stock="{{ item.stock }}">+</button>
                        </div>
                        <p>Subtotal: $<span class="subtotal" data-id="{{ item.id }}">{{ item.subtotal }}</span></p>
                        <button class="btn-eliminar" data-id="{{ item.id }}">Eliminar</button>
                    </div>
                </div>
            {% endfor %}
        </div>

        <h3>Resumen de la compra</h3>
        <div class="total-container">
            {% for item in carrito %}
                {% set total = item.precio * item.cantidad %}
            {% endfor %}
            {% for item in carrito %}
                {% set total = total + (item.precio * item.cantidad) %}
            {% endfor %}
            {% set total = total|number_format(2, '.', '') %}
            <p>Productos en el carrito: {{ carrito|length }}</p>
            <p>Descuento: $<span class="subtotal">{{ (total * 0.10)|number_format(2, '.', '') }}</span></p>
            <p>Envío: $<span class="subtotal">{{ (total * 0.05)|number_format(2, '.', '') }}</span></p>
            <p>Total: $<span class="subtotal">{{ (total * 0.95)|number_format(2, '.', '') }}</span></p>

            <form id="finalizar-compra-form" method="POST" action="compra.php">
                <input type="hidden" name="accion" value="finalizar_compra">
                <button type="submit" class="btn-finalizar">Finalizar Compra</button>
            </form>
        </div>
    {% else %}
        <div class="carrito-msj">
            <p>Tu carrito está vacío. <a href="inicio-consumidor.php">Agrega productos desde aquí...</a>.</p>
        </div>
    {% endif %}
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Manejar el botón de eliminar con SweetAlert
        document.querySelectorAll('.btn-eliminar').forEach(function (button) {
            button.addEventListener('click', function () {
                const id = this.dataset.id;

                Swal.fire({
                    title: "¿Estás seguro?",
                    text: "El producto será eliminado del carrito.",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#d33",
                    cancelButtonColor: "#3085d6",
                    confirmButtonText: "Eliminar",
                    cancelButtonText: "Cancelar"
                }).then((result) => {
                    if (result.isConfirmed) {
                        const formData = new FormData();
                        formData.append('accion', 'eliminar');
                        formData.append('id_producto', id);

                        fetch('compra.php', {
                            method: 'POST',
                            body: formData
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                const productCard = document.querySelector(`.btn-eliminar[data-id="${id}"]`).closest('.product-card');
                                productCard.remove();
                                actualizarTotales();
                                Swal.fire("Eliminado", data.message, "success");
                            } else {
                                Swal.fire("Error", data.message, "error");
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire("Error", "Hubo un problema al eliminar el producto.", "error");
                        });
                    }
                });
            });
        });

        // Manejar los botones de incrementar y decrementar cantidad
        document.querySelectorAll('.btn-incrementar').forEach(function (button) {
            button.addEventListener('click', function () {
                const id = this.dataset.id;
                const stock = parseInt(this.dataset.stock);
                const inputCantidad = document.querySelector(`.cantidad-input[data-id="${id}"]`);
                let cantidadActual = parseInt(inputCantidad.value);

                if (cantidadActual < stock) {
                    cantidadActual++;
                    inputCantidad.value = cantidadActual;

                    actualizarCantidad(id, cantidadActual);
                } else {
                    Swal.fire("Error", "No puedes agregar más productos que el stock disponible.", "error");
                }
            });
        });

        document.querySelectorAll('.btn-decrementar').forEach(function (button) {
            button.addEventListener('click', function () {
                const id = this.dataset.id;
                const inputCantidad = document.querySelector(`.cantidad-input[data-id="${id}"]`);
                let cantidadActual = parseInt(inputCantidad.value);

                if (cantidadActual > 1) {
                    cantidadActual--;
                    inputCantidad.value = cantidadActual;

                    actualizarCantidad(id, cantidadActual);
                } else {
                    Swal.fire("Error", "La cantidad no puede ser menor a 1.", "error");
                }
            });
        });

        // Actualizar cantidad en el servidor
        function actualizarCantidad(id, cantidad) {
            const formData = new FormData();
            formData.append('accion', 'actualizar');
            formData.append('id_producto', id);
            formData.append('cantidad', cantidad);

            fetch('compra.php', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const subtotalElement = document.querySelector(`.subtotal[data-id="${id}"]`);
                    if (subtotalElement) {
                        subtotalElement.textContent = data.subtotal;
                    } else {
                        console.warn(`El producto con ID ${id} ya no existe en el DOM.`);
                    }
                    actualizarTotales();
                } else {
                    Swal.fire("Error", data.message, "error");
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire("Error", "Hubo un problema al actualizar la cantidad.", "error");
            });
        }

        // Actualizar subtotal y total
        function actualizarTotales() {
            let total = 0;
            const productList = document.querySelector('.product-list');
            const totalElement = document.getElementById('total');

            // Verificar si hay productos en la lista
            if (productList && productList.children.length > 0) {
                document.querySelectorAll('.subtotal').forEach(function (subtotalElement) {
                    total += parseFloat(subtotalElement.textContent);
                });

                if (totalElement) {
                    totalElement.textContent = total.toFixed(2);
                }
            } else {
                // Si no hay productos, ocultar o establecer el total en 0
                if (totalElement) {
                    totalElement.textContent = '0.00';
                }
            }
        }

        // Manejar el formulario de finalizar compra
        const formFinalizarCompra = document.getElementById('finalizar-compra-form');

        formFinalizarCompra.addEventListener('submit', function (event) {
            event.preventDefault(); // Evitar el envío normal del formulario

            Swal.fire({
                title: "¿Confirmar pedido?",
                text: "Se enviará tu pedido como pendiente. Recibirás más información en tu WhatsApp.",
                icon: "info",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Confirmar",
                cancelButtonText: "Cancelar"
            }).then((result) => {
                if (result.isConfirmed) {
                    // Enviar el formulario al servidor
                    const formData = new FormData(formFinalizarCompra);

                    fetch('compra.php', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: "¡Pedido realizado!",
                                text: "Tu pedido ha sido registrado con éxito.",
                                icon: "success"
                            }).then(() => {
                                // Redirigir al inicio o limpiar el carrito
                                window.location.href = 'inicio-consumidor.php';
                            });
                        } else {
                            Swal.fire("Error", data.message, "error");
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire("Error", "Hubo un problema al procesar tu pedido.", "error");
                    });
                }
            });
        });
    });
</script>
{% endblock %}